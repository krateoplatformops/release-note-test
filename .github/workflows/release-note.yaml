name: Create GitHub Release

on:
  push:
    tags: ["[0-9]+.[0-9]+.[0-9]+"]

jobs:
  release:
    name: Generate Release from Tag
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Authenticate with GitHub App
        id: authenticate
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Release Notes
        id: notes
        run: |
          # Get the tag name
          TAG_NAME=${GITHUB_REF#refs/tags/}
          
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # Generate changelog from conventional commits with commit hashes and links
          if [ -n "$PREV_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%H|%s|%an" $PREV_TAG..HEAD)
          else
            COMMITS=$(git log --pretty=format:"%H|%s|%an")
          fi
          
          # Create release notes
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          
          # Initialize section flags
          FEATURES_ADDED=false
          FIXES_ADDED=false
          DOCS_ADDED=false
          OTHER_ADDED=false
          
          # Parse conventional commits
          echo "$COMMITS" | while IFS='|' read -r hash message author; do
            # Get short hash for display
            SHORT_HASH=$(echo $hash | cut -c1-7)
            COMMIT_URL="https://github.com/${{ github.repository }}/commit/$hash"
            
            if [[ $message =~ ^feat(\(.+\))?: ]]; then
              if [ "$FEATURES_ADDED" = false ]; then
                echo "" >> release_notes.md
                echo "### ✨ Features" >> release_notes.md
                FEATURES_ADDED=true
              fi
              echo "- $message ([${SHORT_HASH}]($COMMIT_URL)) by @$author" >> release_notes.md
            elif [[ $message =~ ^fix(\(.+\))?: ]]; then
              if [ "$FIXES_ADDED" = false ]; then
                echo "" >> release_notes.md
                echo "### 🐛 Bug Fixes" >> release_notes.md
                FIXES_ADDED=true
              fi
              echo "- $message ([${SHORT_HASH}]($COMMIT_URL)) by @$author" >> release_notes.md
            elif [[ $message =~ ^docs(\(.+\))?: ]]; then
              if [ "$DOCS_ADDED" = false ]; then
                echo "" >> release_notes.md
                echo "### 📚 Documentation" >> release_notes.md
                DOCS_ADDED=true
              fi
              echo "- $message ([${SHORT_HASH}]($COMMIT_URL)) by @$author" >> release_notes.md
            elif [[ $message =~ ^(refactor|perf|test|build|ci|style|chore)(\(.+\))?: ]]; then
              if [ "$OTHER_ADDED" = false ]; then
                echo "" >> release_notes.md
                echo "### 🔧 Other Changes" >> release_notes.md
                OTHER_ADDED=true
              fi
              echo "- $message ([${SHORT_HASH}]($COMMIT_URL)) by @$author" >> release_notes.md
            fi
          done
          
          # Add contributors section
          echo "" >> release_notes.md
          echo "### 👥 Contributors" >> release_notes.md
          echo "" >> release_notes.md
          
          # Get unique contributors using GitHub API to get actual GitHub usernames
          if [ -n "$PREV_TAG" ]; then
            COMMIT_HASHES=$(git log --pretty=format:"%H" $PREV_TAG..HEAD)
          else
            COMMIT_HASHES=$(git log --pretty=format:"%H")
          fi
          
          # Create temporary file for contributors
          > contributors_temp.txt
          
          echo "$COMMIT_HASHES" | while IFS= read -r commit_hash; do
            # Get GitHub username from commit API
            GITHUB_USER=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/commits/$commit_hash" \
              | grep -o '"login":"[^"]*"' | head -1 | cut -d'"' -f4)
            
            if [ -n "$GITHUB_USER" ]; then
              echo "$GITHUB_USER" >> contributors_temp.txt
            fi
          done
          
          # Sort, deduplicate, and add contributors to release notes
          sort contributors_temp.txt | uniq | while IFS= read -r username; do
            echo "- @$username" >> release_notes.md
          done
          
          rm -f contributors_temp.txt
          
          # Add comparison link if previous tag exists
          if [ -n "$PREV_TAG" ]; then
            echo "" >> release_notes.md
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...$TAG_NAME" >> release_notes.md
          fi
          
          # Set output
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Create Release from Tag
        env:
          GITHUB_TOKEN: ${{ steps.authenticate.outputs.token }}
        run: |
          gh release create ${{ steps.notes.outputs.tag_name }} \
            --title "Release ${{ steps.notes.outputs.tag_name }}" \
            --notes-file release_notes.md \
            --draft=false \
            --prerelease=false